int	ft_export(t_shell *shell, t_arg *command)
{
	int		i = 1;
	char 	**args = command->arguments;
	t_env	*env_lst_start = shell->env_list;
	char *equal_sign = NULL;
	int	sign = 0;
	if (args[i] == NULL)
	{
		while (shell->env_list)
		{
			if (!shell->env_list->var_value)
				ft_printf("declare -x %s\n", shell->env_list->var_name);
			else if (ft_strcmp(shell->env_list->var_value, " ") == 0)
				ft_printf("declare -x %s=\"\"\n", shell->env_list->var_name);
			else
			{
				ft_printf("declare -x %s=\"", shell->env_list->var_name);
				ft_printf("%s\"\n", shell->env_list->var_value);
			}
			shell->env_list = shell->env_list->next;
		}
		shell->env_list = env_lst_start;
		return (EXIT_SUCCESS);
	}
	//if(*args[i] == '0' || *args[i] == '1' || *args[i] == '2' || *args[i] == '3' || *args[i] == '4' \
			// || *args[i] == '5' || *args[i] == '6' || *args[i] == '7' || *args[i] == '8' || *args[i] == '9' \
			// || *args[i] == '-' || *args[i] == '+' || *args[i] == '!' || *args[i] == '?' || *args[i] == '$' \
			// || *args[i] == '=' || *args[i] == 34 || *args[i] == 39 || shell->args_list->type == WRONG)
	while (args[i] != NULL) 
	{
        equal_sign = ft_strchr(args[i], '=');
		if (equal_sign)
		{
			size_t name_len = equal_sign - args[i];
			char *var_name = ft_strndup(args[i], name_len);
			char *var_name_test = ft_strdup(var_name);
			if(!is_valid_varname(var_name_test))
			{
				ft_putstr_nl("exit: not a valid identifier", STDERR_FILENO);
				free(var_name);
				free(var_name_test);
				return(EXIT_FAILURE);
			}
			free(var_name_test);// eddig az ELSO
			char *var_value = ft_strdup(equal_sign + 1);
			int k = ft_strlen(var_name);
			t_env *env_lst_start = shell->env_list;
			while(shell->env_list)
			{
				if(!ft_strncmp(shell->env_list->var_name, var_name, k))
				{
					ft_changenode(&shell->env_list, var_value);
					free(var_name);	
					free(var_value);
					sign = 1;
					break;
				}
				shell->env_list = shell->env_list->next;
			}
			shell->env_list = env_lst_start;
			if (sign == 0)
			{
				add_back_env(&shell->env_list, var_name, var_value);
				free(var_name);	
				free(var_value);
			}
		}
		else
		{
			if(!is_valid_varname(args[i]))
			{
				ft_putstr_nl("exit: not a valid identifier", STDERR_FILENO);
				return(EXIT_FAILURE);
			}
			size_t name_len = ft_strlen(args[i]);//NEW
			char *var_name = ft_strndup(args[i], name_len);
			int k = ft_strlen(var_name);
			t_env *env_lst_start = shell->env_list;
			while(shell->env_list)
			{
				if(!ft_strncmp(shell->env_list->var_name, var_name, k))
				{
					free(var_name);
					sign = 1;
					break;
				}
				shell->env_list = shell->env_list->next;
			}
			shell->env_list = env_lst_start;
			if (sign == 0)
			{
				add_back_env(&shell->env_list, args[i], NULL);
				free(var_name);	
			}
		}
		i++;
	}
	if (equal_sign)
		shell->env_list = env_lst_start;
	update_env_2d(shell);
	return (EXIT_SUCCESS);
}

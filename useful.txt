June 19:

-W flags are missing in makefile. We need to put them back before evaluation :)

0. clear cleans everything including prompt

==2522985== 

3. when running with no User (empty env):
==5005== 10 bytes in 1 blocks are definitely lost in loss record 8 of 79
==5005==    at 0x4885250: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-arm64-linux.so)
==5005==    by 0x10F643: ft_strdup (ft_strdup.c:24)
==5005==    by 0x10EDEF: add_var (ft_export_util.c:38)
==5005==    by 0x10B437: ft_export (ft_export.c:77)
==5005==    by 0x10BE6B: empty_user (init.c:84)
==5005==    by 0x10BFA7: handle_env (init.c:120)
==5005==    by 0x10BFDB: init_shell (init.c:127)
==5005==    by 0x10C09F: main (main_minishell.c:22)
==5005== 
==5005== LEAK SUMMARY:
==5005==    definitely lost: 10 bytes in 1 blocks
==5005==    indirectly lost: 0 bytes in 0 blocks
==5005==      possibly lost: 0 bytes in 0 blocks
==5005==    still reachable: 0 bytes in 0 blocks
==5005==         suppressed: 232,874 bytes in 238 blocks
==5005== 
==5005== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
==5005== 
==5005== 1 errors in context 1 of 2:
==5005== Conditional jump or move depends on uninitialised value(s)
==5005==    at 0x10ED38: add_var_free (ft_export_util.c:17)
==5005==    by 0x10EE9B: add_var (ft_export_util.c:53)
==5005==    by 0x10B437: ft_export (ft_export.c:77)
==5005==    by 0x10BE6B: empty_user (init.c:84)
==5005==    by 0x10BFA7: handle_env (init.c:120)
==5005==    by 0x10BFDB: init_shell (init.c:127)
==5005==    by 0x10C09F: main (main_minishell.c:22)
==5005==  Uninitialised value was created by a stack allocation
==5005==    at 0x10B360: ft_export (ft_export.c:63)
==5005== 

7. minishell$cat << k | << s
minishell: syntax error near unexpected token `<<'

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

echo "$PWD''"
echo $USER something
echo "$USER something"

echo a'<'
bash: syntax error: unclosed quote
minishell$echo a'l'

main parsing I did not put dup2 into another function it is more than 25 lines now
touch something >> out3 | cat
echo "valami" | echo "" || make valgrind

w

export ""
export ''
export $USER - it opens
export $okay=something - in bash this gives error

"$USER'''" this one maybe a changin on find_var

return(EXIT_FAILURE)

- SIGNALS - will do in the end. Don't forget to add signals to here_doc as well
- (YULIA?) (minor) export should print alphabetically. We can do it if we want.
- (TINA) cat Makefile > out1.txt >> out2.txt: if we do both > and >> redirections, we always do what command->append says. What we can do: not sure... maybe have few lists files_to_append and files_to_rewrite. And put the flag whichever is last.
- (YULIA) HEREDOC: once SIGNALS done - add signals there
- (minor) SHLVL parameter when calling ./minishell

- (TINA?) (minor) cat << f <<
expected behavior
> f
bash: syntax error near unexpected token `newline'

TAB: ctrl-v + TAB

testers help:
2. https://github.com/MariaAguiar/minitester
3. check all buildins to make sure 1st argument is taken
4. https://docs.google.com/spreadsheets/d/17linwSWODYO4O9Db0FohJYr_8shMTGvyo0MjToPrcAI/edit#gid=1305472556
5. check empty and corrupted env


To open VS Code in a Docker container:

Click on the green icon in the lower-left corner of the status bar (or use the command palette F1 and search for "Remote-Containers: Open Folder in Container...").
Select the folder you want to open in the container.
VS Code will reload and open the folder inside the Docker container.
To switch back to running VS Code on your local machine:

Click on the green icon in the lower-left corner of the status bar (or use the command palette F1 and search for "Remote-Containers: Reopen Locally").
VS Code will reload and open the folder on your local machine.
Remember, you need to have Docker installed and running on your machine to use the "Remote - Containers" extension. If you don't have the extension installed, you can install it from the Extensions view (Ctrl+Shift+X).
